(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var berniespeech, ilovethissong, out$ = typeof exports != 'undefined' && exports || this;
  out$.berniespeech = berniespeech = "In his inaugural remarks in January 1937, in the midst of the Great Depression, President Franklin Delano Roosevelt looked out at the nation and this is what he saw.\n\nHe saw tens of millions of its citizens denied the basic necessities of life.\n\nHe saw millions of families trying to live on incomes so meager that the pall of family disaster hung over them day by day.\n\nHe saw millions denied education, recreation, and the opportunity to better their lot and the lot of their children.\n\nHe saw millions lacking the means to buy the products they needed and by their poverty and lack of disposable income denying employment to many other millions.\n\nHe saw one-third of a nation ill-housed, ill-clad, ill-nourished.\n\nAnd he acted. Against the ferocious opposition of the ruling class of his day, people he called economic royalists, Roosevelt implemented a series of programs that put millions of people back to work, took them out of poverty and restored their faith in government. He redefined the relationship of the federal government to the people of our country. He combatted cynicism, fear and despair. He reinvigorated democracy. He transformed the country.\n\nAnd that is what we have to do today.\n\nAnd, by the way, almost everything he proposed was called “socialist.” Social Security, which transformed life for the elderly in this country was “socialist.” The concept of the “minimum wage” was seen as a radical intrusion into the marketplace and was described as “socialist.” Unemployment insurance, abolishing child labor, the 40-hour work week, collective bargaining, strong banking regulations, deposit insurance, and job programs that put millions of people to work were all described, in one way or another, as “socialist.” Yet, these programs have become the fabric of our nation and the foundation of the middle class.\n\nThirty years later, in the 1960s, President Johnson passed Medicare and Medicaid to provide health care to millions of senior citizens and families with children, persons with disabilities and some of the most vulnerable people in this county. Once again these vitally important programs were derided by the right wing as socialist programs that were a threat to our American way of life.\n\nThat was then. Now is now.\n\nToday, in 2015, despite the Wall Street crash of 2008, which drove this country into the worst economic downturn since the Depression, the American people are clearly better off economically than we were in 1937.\n\nBut, here is a very hard truth that we must acknowledge and address. Despite a huge increase in technology and productivity, despite major growth in the U.S. and global economy, tens of millions of American families continue to lack the basic necessities of life, while millions more struggle every day to provide a minimal standard of living for their families. The reality is that for the last 40 years the great middle class of this country has been in decline and faith in our political system is now extremely low.\n\nThe rich get much richer. Almost everyone else gets poorer. Super PACs funded by billionaires buy elections. Ordinary people don’t vote. We have an economic and political crisis in this country and the same old, same old establishment politics and economics will not effectively address it.\n\nIf we are serious about transforming our country, if we are serious about rebuilding the middle class, if we are serious about reinvigorating our democracy, we need to develop a political movement which, once again, is prepared to take on and defeat a ruling class whose greed is destroying our nation. The billionaire class cannot have it all. Our government belongs to all of us, and not just the one percent.\n\nWe need to create a culture which, as Pope Francis reminds us, cannot just be based on the worship of money. We must not accept a nation in which billionaires compete as to the size of their super-yachts, while children in America go hungry and veterans sleep out on the streets.\n\nToday, in America, we are the wealthiest nation in the history of the world, but few Americans know that because so much of the new income and wealth goes to the people on top. In fact, over the last 30 years, there has been a massive transfer of wealth – trillions of wealth – going from the middle class to the top one-tenth of 1 percent – a handful of people who have seen a doubling of the percentage of the wealth they own over that period.\n\nUnbelievably, and grotesquely, the top one-tenth of 1 percent owns nearly as much wealth as the bottom 90 percent.\n\nToday, in America, millions of our people are working two or three jobs just to survive. In fact, Americans work longer hours than do the people of any industrialized country. Despite the incredibly hard work and long hours of the American middle class, 58 percent of all new income generated today is going to the top one percent.\n\nToday, in America, as the middle class continues to disappear, median family income, is $4,100 less than it was in 1999. The median male worker made over $700 less than he did 42 years ago, after adjusting for inflation. Last year, the median female worker earned more than $1,000 less than she did in 2007.\n\nToday, in America, the wealthiest country in the history of the world, more than half of older workers have no retirement savings – zero – while millions of elderly and people with disabilities are trying to survive on $12,000 or $13,000 a year. From Vermont to California, older workers are scared to death. “How will I retire with dignity?,” they ask?\n\nToday, in America, nearly 47 million Americans are living in poverty and over 20 percent of our children, including 36 percent of African American children, are living in poverty — the highest rate of childhood poverty of nearly any major country on earth.\n\nToday, in America, 29 million Americans have no health insurance and even more are underinsured with outrageously high co-payments and deductibles. Further, with the United States paying the highest prices in the world for prescription drugs, 1 out of 5 patients cannot afford to fill the prescriptions their doctors write.\n\nToday, in America, youth unemployment and underemployment is over 35 percent. Meanwhile, we have more people in jail than any other country and countless lives are being destroyed as we spend $80 billion a year locking up fellow Americans.\n\nThe bottom line is that today in America we not only have massive wealth and income inequality, but a power structure which protects that inequality. A handful of super-wealthy campaign contributors have enormous influence over the political process, while their lobbyists determine much of what goes on in Congress.\n\nIn 1944, in his State of the Union speech, President Roosevelt outlined what he called a second Bill of Rights. This is one of the most important speeches ever made by a president but, unfortunately, it has not gotten the attention that it deserves.\n\nIn that remarkable speech this is what Roosevelt stated, and I quote: “We have come to a clear realization of the fact that true individual freedom cannot exist without economic security and independence. Necessitous men are not free men.” End of quote. In other words, real freedom must include economic security. That was Roosevelt’s vision 70 years ago. It is my vision today. It is a vision that we have not yet achieved. It is time that we did.\n\nIn that speech, Roosevelt described the economic rights that he believed every American was entitled to: The right to a decent job at decent pay, the right to adequate food, clothing, and time off from work, the right for every business, large and small, to function in an atmosphere free from unfair competition and domination by monopolies. The right of all Americans to have a decent home and decent health care.\n\nWhat Roosevelt was stating in 1944, what Martin Luther King, Jr. stated in similar terms 20 years later and what I believe today, is that true freedom does not occur without economic security.\n\nPeople are not truly free when they are unable to feed their family. People are not truly free when they are unable to retire with dignity. People are not truly free when they are unemployed or underpaid or when they are exhausted by working long hours. People are not truly free when they have no health care.\n\nSo let me define for you, simply and straightforwardly, what democratic socialism means to me. It builds on what Franklin Delano Roosevelt said when he fought for guaranteed economic rights for all Americans. And it builds on what Martin Luther King, Jr. said in 1968 when he stated that; “This country has socialism for the rich, and rugged individualism for the poor.” It builds on the success of many other countries around the world that have done a far better job than we have in protecting the needs of their working families, the elderly, the children, the sick and the poor.\n\nDemocratic socialism means that we must create an economy that works for all, not just the very wealthy.\n\nDemocratic socialism means that we must reform a political system in America today which is not only grossly unfair but, in many respects, corrupt.\n\nIt is a system, for example, which during the 1990s allowed Wall Street to spend $5 billion in lobbying and campaign contributions to get deregulated. Then, ten years later, after the greed, recklessness, and illegal behavior of Wall Street led to their collapse, it is a system which provided trillions in government aid to bail them out. Wall Street used their wealth and power to get Congress to do their bidding for deregulation and then, when their greed caused their collapse, they used their wealth and power to get Congress to bail them out. Quite a system!\n\nAnd, then, to add insult to injury, we were told that not only were the banks too big to fail, the bankers were too big to jail. Kids who get caught possessing marijuana get police records. Wall Street CEOs who help destroy the economy get raises in their salaries. This is what Martin Luther King, Jr. meant by socialism for the rich and rugged individualism for everyone else.\n\nIn my view, it’s time we had democratic socialism for working families, not just Wall Street, billionaires and large corporations. It means that we should not be providing welfare for corporations, huge tax breaks for the very rich, or trade policies which boost corporate profits as workers lose their jobs. It means that we create a government that works for works for all of us, not just powerful special interests. It means that economic rights must be an essential part of what America stands for.\n\nIt means that health care should be a right of all people, not a privilege. This is not a radical idea. It exists in every other major country on earth. Not just Denmark, Sweden or Finland. It exists in Canada, France, Germany and Taiwan. That is why I believe in a Medicare-for-all single payer health care system. Yes. The Affordable Care Act, which I helped write and voted for, is a step forward for this country. But we must build on it and go further.\n\nMedicare for all would not only guarantee health care for all people, not only save middle class families and our entire nation significant sums of money, it would radically improve the lives of all Americans and bring about significant improvements in our economy.\n\nPeople who get sick will not have to worry about paying a deductible or making a co-payment. They could go to the doctor when they should, and not end up in the emergency room. Business owners will not have to spend enormous amounts of time worrying about how they are going to provide health care for their employees. Workers will not have to be trapped in jobs they do not like simply because their employers are offering them decent health insurance plans. Instead, they will be able to pursue the jobs and work they love, which could be an enormous boon for the economy. And by the way, moving to a Medicare for all program will end the disgrace of Americans paying, by far, the highest prices in the world for prescription drugs.\n\nDemocratic socialism means that, in the year 2015, a college degree is equivalent to what a high school degree was 50 years ago – and that public education must allow every person in this country, who has the ability, the qualifications and the desire, the right to go to a public colleges or university tuition free. This is also not a radical idea. It exists today in many countries around the world. In fact, it used to exist in the United States.\n\nDemocratic socialism means that our government does everything it can to create a full employment economy. It makes far more sense to put millions of people back to work rebuilding our crumbling infrastructure, than to have a real unemployment rate of almost 10%. It is far smarter to invest in jobs and educational opportunities for unemployed young people, than to lock them up and spend $80 billion a year through mass incarceration.\n\nDemocratic socialism means that if someone works forty hours a week, that person should not be living in poverty: that we must raise the minimum wage to a living wage – $15 an hour over the next few years. It means that we join the rest of the world and pass the very strong Paid Family and Medical Leave legislation now in Congress. How can it possibly be that the United States, today, is virtually the only nation on earth, large or small, which does not guarantee that a working class woman can stay home for a reasonable period of time with her new-born baby? How absurd is that?\n\nDemocratic socialism means that we have government policy which does not allow the greed and profiteering of the fossil fuel industry to destroy our environment and our planet, and that we have a moral responsibility to combat climate change and leave this planet healthy and habitable for our kids and grandchildren.\n\nDemocratic socialism means, that in a democratic, civilized society the wealthiest people and the largest corporations must pay their fair share of taxes. Yes. Innovation, entrepreneurship and business success should be rewarded. But greed for the sake of greed is not something that public policy should support. It is not acceptable that in a rigged economy in the last two years the wealthiest 15 Americans saw their wealth increase by $170 billion, more wealth than is owned by the bottom 130 million Americans. Let us not forget what Pope Francis has so elegantly stated; “We have created new idols. The worship of the golden calf of old has found a new and heartless image in the cult of money and the dictatorship of an economy which is faceless and lacking any truly humane goal.”\n\nIt is not acceptable that major corporations stash their profits in the Cayman Islands and other offshore tax havens to avoid paying $100 billion in taxes each and every year. It is not acceptable that hedge fund managers pay a lower effective tax rate than nurses or truck drivers. It is not acceptable that billionaire families are able to leave virtually all of their wealth to their families without paying a reasonable estate tax. It is not acceptable that Wall Street speculators are able to gamble trillions of dollars in the derivatives market without paying a nickel in taxes on those transactions.\n\nDemocratic socialism, to me, does not just mean that we must create a nation of economic and social justice. It also means that we must create a vibrant democracy based on the principle of one person one vote. It is extremely sad that the United States, one of the oldest democracies on earth, has one of the lowest voter turnouts of any major country, and that millions of young and working class people have given up on our political system entirely. Every American should be embarrassed that in our last national election 63% of the American people, and 80% of young people, did not vote. Clearly, despite the efforts of many Republican governors to suppress the vote, we must make it easier for people to participate in the political process, not harder. It is not too much to demand that everyone 18 years of age is registered to vote – end of discussion.\n\nFurther, it is unacceptable that we have a corrupt campaign finance system which allows millionaires, billionaires and large corporations to contribute as much as they want to Super Pacs to elect candidates who will represent their special interests. We must overturn Citizens United and move to public funding of elections.\n\nSo the next time you hear me attacked as a socialist, remember this:\n\nI don’t believe government should own the means of production, but I do believe that the middle class and the working families who produce the wealth of America deserve a fair deal.\n\nI believe in private companies that thrive and invest and grow in America instead of shipping jobs and profits overseas.\n\nI believe that most Americans can pay lower taxes – if hedge fund managers who make billions manipulating the marketplace finally pay the taxes they should.\n\nI don’t believe in special treatment for the top 1%, but I do believe in equal treatment for African-Americans who are right to proclaim the moral principle that Black Lives Matter.\n\nI despise appeals to nativism and prejudice, and I do believe in immigration reform that gives Hispanics and others a pathway to citizenship and a better life.\n\nI don’t believe in some foreign “ism”, but I believe deeply in American idealism.\n\nI’m not running for president because it’s my turn, but because it’s the turn of all of us to live in a nation of hope and opportunity not for some, not for the few, but for all.\n\nNo one understood better than FDR the connection between American strength at home and our ability to defend America at home and across the world. That is why he proposed a second Bill of Rights in 1944, and said in that State of the Union:\n\n“America’s own rightful place in the world depends in large part upon how fully these and similar rights have been carried into practice for all our citizens. For unless there is security here at home there cannot be lasting peace in the world.”\n\nI’m not running to pursue reckless adventures abroad, but to rebuild America’s strength at home. I will never hesitate to defend this nation, but I will never send our sons and daughters to war under false pretense or pretenses or into dubious battles with no end in sight.\n\nAnd when we discuss foreign policy, let me join the people of Paris in mourning their loss, and pray that those who have been wounded will enjoy a full recovery. Our hearts also go out to the families of the hundreds of Russians apparently killed by an ISIS bomb on their flight, and those who lost their lives to terrorist attacks in Lebanon and elsewhere.\n\nTo my mind, it is clear that the United States must pursue policies to destroy the brutal and barbaric ISIS regime, and to create conditions that prevent fanatical extremist ideologies from flourishing. But we cannot – and should not – do it alone.\n\nOur response must begin with an understanding of past mistakes and missteps in our previous approaches to foreign policy. It begins with the acknowledgment that unilateral military action should be a last resort, not a first resort, and that ill-conceived military decisions, such as the invasion of Iraq, can wreak far-reaching devastation and destabilize entire regions for decades. It begins with the reflection that the failed policy decisions of the past – rushing to war, regime change in Iraq, or toppling Mossadegh in Iran in 1953, or Guatemalan President Árbenz in 1954, Brazilian President Goulart in 1964, Chilean President Allende in 1973. These are the sorts of policies do not work, do not make us safer, and must not be repeated.\n\nAfter World War II, in response to the fear of Soviet aggression, European nations and the United States established the North Atlantic Treaty Organization – an organization based on shared interests and goals and the notion of a collective defense against a common enemy. It is my belief that we must expand on these ideals and solidify our commitments to work together to combat the global threat of terror.\n\nWe must create an organization like NATO to confront the security threats of the 21st century – an organization that emphasizes cooperation and collaboration to defeat the rise of violent extremism and importantly to address the root causes underlying these brutal acts. We must work with our NATO partners, and expand our coalition to include Russia and members of the Arab League.\n\nBut let’s be very clear. While the U.S. and other western nations have the strength of our militaries and political systems, the fight against ISIS is a struggle for the soul of Islam, and countering violent extremism and destroying ISIS must be done primarily by Muslim nations – with the strong support of their global partners.\n\nThese same sentiments have been echoed by those in the region. Jordan’s King Abdallah II said in a speech on Sunday that terrorism is the “greatest threat to our region” and that Muslims must lead the fight against it. He noted that confronting extremism is both a regional and international responsibility, and that it is incumbent on Muslim nations and communities to confront those who seek to hijack their societies and generations with intolerance and violent ideology.\n\nAnd let me congratulate King Abdallah not only for his wise remarks, but also for the role that his small country is playing in attempting to address the horrific refugee crisis in the region.\n\nA new and strong coalition of Western powers, Muslim nations, and countries like Russia must come together in a strongly coordinated way to combat ISIS, to seal the borders that fighters are currently flowing across, to share counter-terrorism intelligence, to turn off the spigot of terrorist financing, and to end support for exporting radical ideologies.\n\nWhat does all of this mean? Well, it means that, in many cases, we must ask more from those in the region. While Jordan, Turkey, Egypt, and Lebanon have accepted their responsibilities for taking in Syrian refugees, other countries in the region have done nothing or very little.\n\nEqually important, and this is a point that must be made – countries in the region like Saudi Arabia, Kuwait, Qatar, UAE – countries of enormous wealth and resources – have contributed far too little in the fight against ISIS. That must change. King Abdallah is absolutely right when he says that that the Muslim nations must lead the fight against ISIS, and that includes some of the most wealthy and powerful nations in the region, who, up to this point have done far too little.\n\nSaudi Arabia has the 3rd largest defense budget in the world, yet instead of fighting ISIS they have focused more on a campaign to oust Iran-backed Houthi rebels in Yemen. Kuwait, a country whose ruling family was restored to power by U.S. troops after the first Gulf War, has been a well-known source of financing for ISIS and other violent extremists. It has been reported that Qatar will spend $200 billion on the 2022 World Cup, including the construction of an enormous number of facilities to host that event – $200 billion on hosting a soccer event, yet very little to fight against ISIS. Worse still, it has been widely reported that the government has not been vigilant in stemming the flow of terrorist financing, and that Qatari individuals and organizations funnel money to some of the most extreme terrorist groups, including al Nusra and ISIS.\n\nAll of this has got to change. Wealthy and powerful Muslim nations in the region can no longer sit on the sidelines and expect the United States to do their work for them. As we develop a strongly coordinated effort, we need a commitment from these countries that the fight against ISIS takes precedence over the religious and ideological differences that hamper the kind of cooperation that we desperately need.\n\nFurther, we all understand that Bashar al-Assad is a brutal dictator who has slaughtered many of his own people. I am pleased that we saw last weekend diplomats from all over world, known as the International Syria Support Group, set a timetable for a Syrian-led political transition with open and fair elections. These are the promising beginnings of a collective effort to end the bloodshed and to move to political transition.\n\nThe diplomatic plan for Assad’s transition from power is a good step in a united front. But our priority must be to defeat ISIS. Nations all over the world, who share a common interest in protecting themselves against international terrorist, must make the destruction of ISIS the highest priority. Nations in the region must commit – that instead of turning a blind eye — they will commit their resources to preventing the free flow of terrorist finances and fighters to Syria and Iraq. We need a commitment that they will counter the violent rhetoric that fuels terrorism – rhetoric that often occurs within their very borders.\n\nThis is the model in which we must pursue solutions to the sorts of global threats we face.\n\nWhile individual nations indeed have historic disputes – the U.S. and Russia, Iran and Saudi Arabia – the time is now to put aside those differences to work towards a common purpose of destroying ISIS. Sadly, as we have seen recently, no country is immune from attacks by the violent organization or those whom they have radicalized.\n\nThus, we must work with our partners in Europe, the Gulf states, Africa, and Southeast Asia – all along the way asking the hard questions whether their actions are serving our unified purpose.\n\nThe bottom line is that ISIS must be destroyed, but it cannot be defeated by the United States alone. A new and effective coalition must be formed with the Muslim nations leading the effort on the ground, while the United States and other major forces provide the support they need.";
  out$.ilovethissong = ilovethissong = "\"Request\" lyrics\nS3RL LYRICS\n\"Request\"\n\nMr DJ,\nListen to what I say,\nI've got a track, a request I want you\n    to play\n\nAlright lady,\nGive me a track name,\nIf I've got it then spin it for you okay\n\nDidn't expect that,\nFor you to say okay,\nThe last DJ told me to get *&#$$ and go\n    away\nI'm not prepared,\nI don't know the name\nOnly how it goes...\n\nPlay me the song that goes...\n\nOh oh I love this song,\nI can't help but sing along,\nWhen I hear it being played,\nI just wanna dance all day,\nOh oh my favourite song,\nI can't help but sing along,\nEven the words I don't know,\nI still sing them, I just go...\n\nNa na na na na na na na\nNa na na na na\n\nNa na na na na na na na\nNa na na na na\n\nOh oh I love this song,\nI can't help but sing along,\nWhen I hear it being played,\nI just wanna dance all day,\nOh oh my favourite song,\nI can't help but sing along,\nEven the words I don't know,\nI still sing them, I just go...\n\nNa na na na na na na na\nNa na na na na\n\nMr DJ,\nI just wanna say,\nThank you so much for playing my request\n    today.\n\nYeah that's ok,\nWhat kinda DJ,\nWould I be if I didn't take requests\n    anyway?\n\nWhy can't all DJ's,\nJust take the damn requests?\nNot just play for themselves and then go\n    ignore the rest\nIf they have got the song,\nThen they should play along,\nPlay it again for me.\n\nI'm not playing it again bitch.\n\nOh oh I love this song,\nI can't help but sing along,\nWhen I hear it being played,\nI just wanna dance all day,\nOh oh my favourite song,\nI can't help but sing along,\nEven the words I don't know,\nI still sing them, I just go...\n\nNa na na na na na na na\nNa na na na na ";
}).call(this);



},{}],2:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var speeches, cols;
  speeches = require('./speeches');
  cols = 40;
  function map(f, list){
    var res, i$, len$, itm;
    res = [];
    for (i$ = 0, len$ = list.length; i$ < len$; ++i$) {
      itm = list[i$];
      res.push(f(itm));
    }
    return res;
  }
  function any(list){
    var i$, len$, elem;
    for (i$ = 0, len$ = list.length; i$ < len$; ++i$) {
      elem = list[i$];
      if (elem) {
        return true;
      }
    }
    return false;
  }
  function wcswidth(text){
    return text.length;
  }
  function wrap(line){
    var pat, prev, m, cur, curw, rest;
    if (wcswidth(line) <= cols) {
      return [line];
    } else {
      pat = /\s+/g;
      prev = 0;
      while (m = pat.exec(line)) {
        cur = m.index + m[0].length;
        curw = wcswidth(line.substr(0, cur));
        if (curw > cols) {
          break;
        } else {
          prev = cur;
        }
      }
      rest = wrap(line.substr(prev));
      return [line.substr(0, prev)].concat(rest);
    }
  }
  function txProcess(text){
    var lines, toobig, autowrap, reallines, i$, ref$, len$, paragraph, line;
    lines = text.split('\n');
    toobig = function(line){
      return wcswidth(line) > cols;
    };
    autowrap = any(map(toobig, lines));
    reallines = [];
    if (autowrap) {
      for (i$ = 0, len$ = (ref$ = text.split(/[\t \v\f\r]*(?:\n[\t \v\f\r]*)+/)).length; i$ < len$; ++i$) {
        paragraph = ref$[i$];
        Array.prototype.push.apply(reallines, wrap(paragraph));
        reallines.push('');
      }
    } else {
      for (i$ = 0, len$ = lines.length; i$ < len$; ++i$) {
        line = lines[i$];
        Array.prototype.push.apply(reallines, wrap(line));
      }
    }
    return reallines;
  }
  $(function(){
    var position, basePosition, referenceTime, speed, defaultSpeed, scr, origText, skipTo, setSpeed, setDefaultSpeed, update, reload;
    position = 0;
    basePosition = 0;
    referenceTime = 0;
    speed = 0;
    defaultSpeed = 0.2 / 3;
    scr = $('#script');
    origText = speeches.berniespeech;
    window.easter = function(){
      var vid;
      vid = "pXzTFv80E1A";
      window.onYouTubeIframeAPIReady = function(){
        var panel, player;
        panel = $('#nowset').parent();
        panel.append("<div id=player></div>");
        origText = speeches.ilovethissong;
        setSpeed(0);
        skipTo(0);
        reload();
        return player = new YT.Player('player', {
          width: panel.width(),
          height: panel.width() * 3 / 4,
          videoId: vid,
          events: {
            onReady: function(it){
              return it.target.playVideo();
            }
          }
        });
      };
      return $.getScript("https://www.youtube.com/iframe_api");
    };
    skipTo = function(line){
      basePosition = line;
      position = basePosition;
      referenceTime = performance.now();
      if (speed === 0) {
        setSpeed(1);
        return setSpeed(0);
      }
    };
    setSpeed = function(spd){
      var needUpd;
      needUpd = speed === 0;
      speed = spd;
      basePosition = position;
      referenceTime = performance.now();
      if (speed !== 0 && needUpd) {
        return update();
      }
    };
    setDefaultSpeed = function(spd){
      defaultSpeed = spd;
      $('#gauge').css({
        height: 10 * defaultSpeed * 1.2 + "em"
      });
      if (speed !== 0) {
        return setSpeed(defaultSpeed);
      }
    };
    setDefaultSpeed(0.6);
    update = function(){
      var now;
      if (speed !== 0) {
        scr.css({
          willChange: "transform"
        });
        now = performance.now();
        position = basePosition + speed * (now - referenceTime) / 1000;
        scr.css({
          transform: "translateY(" + -position * 1.2 + "em)"
        });
        return requestAnimationFrame(update);
      } else {
        return scr.css({
          willChange: ""
        });
      }
    };
    reload = function(){
      var i$, ref$, len$, line, results$ = [];
      scr.html('');
      for (i$ = 0, len$ = (ref$ = txProcess(origText)).length; i$ < len$; ++i$) {
        line = ref$[i$];
        results$.push(scr.append($('<div></div>').addClass('scriptrow').text(line)));
      }
      return results$;
    };
    $('#reset').click(function(){
      return skipTo(0);
    });
    $('#faster').click(function(){
      setSpeed(speed === 0 ? defaultSpeed : 0);
      return console.log("Set speed to " + speed);
    });
    $('#settext').click(function(){
      $('#pastebox').addClass('pb-active');
      $('#nowset').removeClass('hiddenbutton');
      return $(this).addClass('hiddenbutton');
    });
    $('#nowset').click(function(){
      setSpeed(0);
      origText = $('#pastebox').val();
      reload();
      $('#pastebox').val('');
      $('#pastebox').removeClass('pb-active');
      $(this).addClass('hiddenbutton');
      return $('#settext').removeClass('hiddenbutton');
    });
    $('#slower').click(function(){
      return setDefaultSpeed(defaultSpeed - 0.05);
    });
    $('#flower').click(function(){
      return setDefaultSpeed(defaultSpeed + 0.05);
    });
    $('#cols').keyup(function(){
      cols = parseInt($(this).val(), 10);
      skipTo(0);
      return reload();
    });
    $('#fontsize').keyup(function(){
      var fs;
      fs = parseFloat($(this).val());
      return scr.parent().css({
        fontSize: fs + "em"
      });
    });
    $('#cols').val("40");
    $('#fontsize').val("2.5");
    return reload();
  });
}).call(this);



},{"./speeches":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
